name: Continuous Integration
on:
 pull_request:
   types: [opened, synchronize, reopened]
 push:
   branches:
     - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.8
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: Run unit tests
        run: |
          docker run --rm --privileged \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            golang:1.22 \
            /bin/sh -c "go mod download && go test ./..."
  report:
    name: Report
    runs-on: ubuntu-latest
    steps:
    - name: ref
      run: echo ${{ github.ref }}
    - name: event_name
      run: echo ${{ github.event_name }}
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: 386
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: armv6
          - goos: linux
            goarch: armv7
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: set up go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    - name: ci
      run: make fmt-check vet OS=${{ matrix.goos }}
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
    - name: Build binaries
      env:
        GOARCH: ${{ matrix.goarch }}
        GOOS: ${{ matrix.goos }}
      run: |
        ARCH=""
        case $GOARCH in
          amd64)
            ARCH="x86_64"
            ;;
          386)
            ARCH="i386"
            ;;
          arm64)
            ARCH="arm64"
            ;;
          armv6)
            GOARCH=arm
            GOARM=6
            ARCH="armv6"
            ;;
          armv7)
            GOARCH=arm
            GOARM=7
            ARCH="armv7"
            ;;
          *)
            ARCH=$GOARCH
            ;;
        esac
        OUT_DIR=dist/pcap-$GOOS-$ARCH
        mkdir -p $OUT_DIR
        go build -o $OUT_DIR ./cmd
  release:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: checkout code
      uses: actions/checkout@v4
    - name: set up go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    - name: Get next version
      id: vars
      run: |
        cd ..; go install github.com/caarlos0/svu@latest ; cd - 
        echo "NEW_TAG=$(svu next)" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: goPcap-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream

