name: Continuous Integration
on:
 pull_request:
   types: [opened, synchronize, reopened]
 push:
   branches:
     - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go mod download
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
      - name: Format check
        run: make fmt-check
      - name: Run unit tests
        run: |
          docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -v ${{ github.workspace }}/go/pkg/mod:/go/pkg/mod \ # Add module cache volume
          -w /workspace \
          golang:1.22 \
          /bin/sh -c "go test ./..."
  workflow_info:
    name: Workflow Info
    runs-on: ubuntu-latest
    steps:
    - name: ref
      run: echo ${{ github.ref }}
    - name: event_name
      run: echo ${{ github.event_name }}
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
    strategy:
      matrix:
        include:
          - target: linux-i386
            goos: linux
            goarch: 386
          - target: linux-x86_64
            goos: linux
            goarch: amd64
          - target: linux-armv6
            goos: linux
            goarch: armv6
          - target: linux-armv7
            goos: linux
            goarch: armv7
          - target: linux-arm64
            goos: linux
            goarch: arm64
          - target: linux-viscv64
            goos: linux
            goarch: riscv64
          - target: darwin-x86_64
            goos: darwin
            goarch: amd64
          - target: darwin-arm64
            goos: darwin
            goarch: arm64
        steps:
        - name: Build binaries
          env:
            TARGET: ${{ matrix.target }}
            GOARCH: ${{ matrix.goarch }}
            GOOS: ${{ matrix.goos }}
          run: |
            OUT_DIR=dist/pcap-$TARGET
            mkdir -p $OUT_DIR
            go build -o $OUT_DIR/pcap ./cmd
  new_tag:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    name: New Tag
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Get next version
        id: new_git_tag
        run: |
          cd ..; go install github.com/caarlos0/svu@latest ; cd - 
          echo "NEW_TAG=$(svu next)" >> $GITHUB_OUTPUT
    outputs:
      new_tag: ${{ steps.new_git_tag.outputs.NEW_TAG }}
  release:
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (github.event_name == 'push') }}
    name: Release
    runs-on: ubuntu-latest
    needs: [build, new_tag]
    strategy:
      matrix:
        include:
          - target: linux-i386
            goos: linux
            goarch: 386
          - target: linux-x86_64
            goos: linux
            goarch: amd64
          - target: linux-armv6
            goos: linux
            goarch: armv6
          - target: linux-armv7
            goos: linux
            goarch: armv7
          - target: linux-arm64
            goos: linux
            goarch: arm64
          - target: linux-viscv64
            goos: linux
            goarch: riscv64
          - target: darwin-x86_64
            goos: darwin
            goarch: amd64
          - target: darwin-arm64
            goos: darwin
            goarch: arm64
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.new_tag.outputs.new_tag }}   # Get from new_tag's output
        release_name: Release ${{ needs.new_tag.outputs.new_tag }} # Get from new_tag's output
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pcap-${{ matrix.target }}/pcap
        asset_name: pcap-${{ matrix.target }}
        asset_content_type: application/octet-stream

